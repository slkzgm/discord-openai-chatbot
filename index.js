const { Client, GatewayIntentBits } = require('discord.js');
const { answerConversation } = require("./openai");
require('dotenv').config();

// Cr√©ation du client Discord
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent
    ]
});

// Variations des messages
const responses = {
    thanks: [
        "Content d'avoir pu √©clairer ta lanterne, √† bient√¥t !",
        "Toujours dispo pour aider, tu sais o√π me trouver !",
        "√áa me fait plaisir de rendre service, √† la prochaine !",
        "Bon, mission accomplie, je me retire en silence üòé",
        "Heureux d‚Äôavoir pu participer, on se revoit bient√¥t j‚Äôesp√®re !",
        "Je m‚Äôenvole vers d'autres aventures. √Ä la prochaine ! ü¶∏‚Äç‚ôÇÔ∏è",
        "Si t‚Äôas encore besoin, tu sais o√π cliquer, hein üòâ",
        "Content de t‚Äôavoir aid√©, mais c‚Äôest l‚Äôheure pour moi de briller ailleurs ‚ú®",
        "Eh bien, je suppose que c‚Äôest tout pour moi, allez ciao !",
        "Une aide de qualit√©, c‚Äôest tout naturel avec moi üòè",
        "Ravi d‚Äôavoir pu vous assister, cher ami. Au plaisir !",
        "Je disparais dans les ombres‚Ä¶ enfin, jusqu‚Äô√† la prochaine question !",
        "Allez, un plaisir comme d‚Äôhab, on se capte plus tard !",
        "H√©, c‚Äôest toujours un honneur d‚Äôaider. √Ä bient√¥t, bande de geeks !",
        "Le bot est mort, vive le bot ! √Ä la prochaine fois üòâ",
        "Avec un peu de runes et de chance, on arrive √† tout ! √Ä bient√¥t les invocateurs !",
        "Content d'avoir boost√© ton niveau, on se recroise bient√¥t sur l'ar√®ne !",
        "C‚Äô√©tait aussi efficace qu‚Äôun combo bien plac√© dans Summoners War. √Ä plus tard !",
        "Toujours l√† pour filer un coup de main, comme un bon support en ar√®ne !",
        "T‚Äôas g√©r√© comme un h√©ros de shonen, maintenant go farmer des donjons !",
        "Bon, t‚Äôes pr√™t pour ton prochain √©veil ? √Ä la prochaine invocation !",
        "Aide termin√©e, on se revoit apr√®s ton prochain scroll mystique !",
        "Je suis pas un personnage 5 √©toiles, mais je fais le taf üòâ",
        "Ravi d‚Äôavoir pu t‚Äô√©pauler, maintenant go grinder ces runes !",
        "Comme un bon vieux power-up d‚Äôanime, j‚Äôai fait mon taf. √Ä la revoyure !",
        "Ouais, t'as ma√Ætris√© cette question comme un pro d'ar√®ne. √Ä bient√¥t pour un duel !",
        "Heureux d‚Äôavoir aid√©, maintenant farm les gemmes !",
        "Mission accomplie, j'suis pr√™t pour le prochain challenge. √Ä plus dans le Rift !",
        "Bon, t‚Äôas maintenant toutes les cartes en main. Pr√™t pour l‚Äôar√®ne ?",
        "C‚Äô√©tait aussi satisfaisant qu‚Äôun ultimate bien plac√©. √Ä plus tard !"
    ],
    tooMuchTalking: [
        "Wouah, trop de blabla, j‚Äôai besoin d‚Äôune pause l√† üò¥",
        "Ouh l√†, √ßa devient intense, je vais prendre du recul !",
        "Vous √™tes bavards, je me retire avant que √ßa devienne trop s√©rieux.",
        "Eh oh, je vais finir par surchauffer avec tout √ßa, peace out !",
        "Trop de mots, trop d'infos, j'abandonne üòµ",
        "Vous parlez autant que des conf√©renciers, je vous laisse entre pros üòú",
        "Bon, trop de discussions, je vais prendre une sieste !",
        "Je vous laisse, vous √™tes en pleine conf√©rence TED l√† ou quoi ?",
        "Oubliez pas de respirer entre deux phrases hein !",
        "Vous d√©battez comme des philosophes. Moi, je sors du game !",
        "Bon, c‚Äôest bien beau, mais l√†, je m‚Äô√©clipse avant l‚Äôexplosion neuronale !",
        "Hey, je vous laisse entre bavards, moi je vais regarder des m√®mes.",
        "Vous avez trop de choses √† dire, moi j‚Äôarr√™te l√† !",
        "Je vous laisse papoter, moi j‚Äôai besoin d‚Äôun caf√© ‚òï",
        "Ok ok, j'abandonne, trop de dialogue pour moi, bye les intellos !",
        "Ok ok, je m‚Äô√©clipse avant qu‚Äôon se retrouve dans un d√©bat digne de One Piece üòÖ",
        "√áa commence √† ressembler √† un √©pisode filler, je vais farm mes runes ailleurs !",
        "Vous parlez plus qu‚Äôun shonen en plein arc narratif, je prends la tangente !",
        "C‚Äôest pire qu‚Äôun GvG tendu l√†, je vais prendre un break !",
        "On dirait une discussion de fin de saison d‚Äôanime, je vais me poser un peu !",
        "C‚Äôest devenu plus intense qu‚Äôun combat contre un boss de raid, je me casse !",
        "Trop de blabla, je vais invoquer du calme ailleurs. √Ä plus !",
        "Oulah, √ßa devient plus long qu‚Äôun √©pisode de Hunter x Hunter. Break time !",
        "On dirait un arc narratif qui ne finit jamais, je prends la porte !",
        "Je vais pas faire un AFK comme dans Summoners War, mais je vous laisse discuter !",
        "Vous √™tes plus longs que l'attente entre deux events, moi je vais en ar√®ne !",
        "Trop de strats et pas assez d‚Äôaction, je me d√©connecte avant l‚Äôoverload !",
        "Vous √™tes plus bavards qu‚Äôun h√©ros de shonen en plein discours !",
        "Je pensais √™tre dans une ar√®ne, mais l√† c'est un marathon de paroles. Pause time !",
        "Vous g√©rez la conversation comme un boss de raid, mais l√† je sature. √Ä plus !"
    ]
};

// S√©lectionner un message al√©atoire
function getRandomResponse(category) {
    const messages = responses[category];
    return messages[Math.floor(Math.random() * messages.length)];
}

let groupConversation = null;
let tokensUsed = 0;
const MAX_TOKENS = 10000;
let conversationTimeout;

async function answer(message) {
    // D√©clenche "XX est en train d'√©crire..."
    await message.channel.sendTyping();

    // V√©rifie si quelqu'un remercie ou cl√¥ture la conversation
    if (message.content.toLowerCase().includes("merci") || message.content.toLowerCase().includes("c'est tout")) {
        await message.reply(getRandomResponse('thanks'));
        groupConversation = null; // R√©initialise la conversation de groupe
        tokensUsed = 0;
        return;
    }

    // Ajoute le message de l'utilisateur dans la conversation
    groupConversation.push({
        role: 'user',
        content: `${message.author.username}: ${message.content}`
    });

    // Si au moins 3 messages sont √©chang√©s, le bot peut g√©n√©rer une r√©ponse
    if (groupConversation.length >= 3) {
        try {
            // Simule que le bot est en train d'√©crire pendant que l'API g√©n√®re la r√©ponse
            await message.channel.sendTyping();

            const response = await answerConversation(groupConversation);

            const botResponse = response.choices[0].message.content.trim();

            // Enregistre la r√©ponse du bot dans l'historique de la conversation
            groupConversation.push({
                role: 'assistant',
                content: botResponse
            });

            // Incr√©mente le nombre de tokens utilis√©s
            tokensUsed += response.usage.total_tokens;

            // Si le nombre maximal de tokens est atteint, arr√™ter la conversation
            if (tokensUsed >= MAX_TOKENS) {
                await message.channel.send(getRandomResponse('tooMuchTalking'));
                groupConversation = null;
                tokensUsed = 0;
            } else {
                // Sinon, le bot r√©pond au message
                await message.channel.send(botResponse);
            }

        } catch (error) {
            console.error("Erreur lors de l'appel √† l'API OpenAI :", error);
            await message.reply("D√©sol√©, une erreur s'est produite en essayant de r√©pondre.");
            groupConversation = null; // R√©initialise la conversation en cas d'erreur
        }
    }
}

// Fonction pour r√©initialiser le d√©lai de r√©ponse automatique
function resetConversationTimeout(message) {
    if (conversationTimeout) {
        clearTimeout(conversationTimeout);
    }

    conversationTimeout = setTimeout(async () => {
        // V√©rifie si une conversation est active et si le dernier message n'est pas du bot
        if (groupConversation && groupConversation.length > 0) {
            const lastMessage = groupConversation[groupConversation.length - 1];
            if (lastMessage.role === 'assistant') {
                // Le dernier message est du bot, donc on ne r√©pond pas automatiquement
                return;
            }

            // Si le dernier message n'est pas du bot, le bot peut proposer de l'aide apr√®s 60 secondes
            await answer(message);
        }
    }, 10000); // R√©pond apr√®s 60 secondes d'inactivit√©
}

client.once('ready', () => {
    console.log(`Connect√© en tant que ${client.user.tag}`);
});

client.on('messageCreate', async (message) => {
    // Emp√™che le bot de r√©pondre √† ses propres messages
    if (message.author.bot) return;

    // V√©rifie si le bot est mentionn√© avec @ pour commencer ou continuer la conversation
    if (message.mentions.has(client.user)) {
        if (!groupConversation) {
            groupConversation = [];
            tokensUsed = 0; // R√©initialise les tokens utilis√©s

            // R√©cup√©rer l'historique des messages pr√©c√©dents pour le contexte
            const history = await message.channel.messages.fetch({ limit: 10 });
            history.reverse().forEach(msg => {
                groupConversation.push({
                    role: 'user',
                    content: `${msg.author.username}: ${msg.content}`
                });
            });

            await answer(message);
            resetConversationTimeout(message); // D√©clenche le d√©lai apr√®s la r√©ponse
            return;
        } else {
            await answer(message);
            resetConversationTimeout(message); // R√©initialise le d√©lai apr√®s chaque message
            return;
        }
    }

    // Si une conversation de groupe est en cours, mais le bot n'est pas mentionn√©
    if (groupConversation) {
        groupConversation.push({
            role: 'user',
            content: `${message.author.username}: ${message.content}`
        });

        resetConversationTimeout(message); // R√©initialise le d√©lai apr√®s chaque message
    }
});

// Connecte le bot √† Discord avec le token
client.login(process.env.DISCORD_TOKEN);